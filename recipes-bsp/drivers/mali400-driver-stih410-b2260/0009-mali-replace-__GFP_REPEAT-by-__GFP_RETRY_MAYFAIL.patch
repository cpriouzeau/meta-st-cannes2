From e48e14547b053fcde61629a5b4af426cb279e8b7 Mon Sep 17 00:00:00 2001
From: Vincent Abriou <vincent.abriou@st.com>
Date: Tue, 11 Jul 2017 16:12:20 +0200
Subject: [PATCH 3/3] mali: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL

This fix the build issue due to the fact that __GFP_REPEAT has been
replaced by __GFP_RETRY_MAYFAIL.

Build issue introduced by:
commit ec8b6c668 "mm, tree wide: replace __GFP_REPEAT by __GFP_RETRY_MAYFAIL with more useful semantic"

Change-Id: I4aab03e997921a3184ef33bca132336041fe8c34
Signed-off-by: Vincent Abriou <vincent.abriou@st.com>
Reviewed-on: https://gerrit.st.com/73563
Reviewed-by: CITOOLS <smet-aci-reviews@lists.codex.cro.st.com>
Reviewed-by: Christophe PRIOUZEAU <christophe.priouzeau@st.com>
---
 src/devicedrv/mali/linux/mali_osk_notification.c       | 6 +++++-
 src/devicedrv/ump/linux/ump_kernel_memory_backend_os.c | 8 +++++---
 2 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/src/devicedrv/mali/linux/mali_osk_notification.c b/src/devicedrv/mali/linux/mali_osk_notification.c
index 5867841..8958d3e 100755
--- a/src/devicedrv/mali/linux/mali_osk_notification.c
+++ b/src/devicedrv/mali/linux/mali_osk_notification.c
@@ -20,6 +20,10 @@
 #include <linux/slab.h>
 #include <linux/spinlock.h>
 
+#ifdef __GFP_REPEAT
+#define __GFP_RETRY_MAYFAIL __GFP_REPEAT
+#endif
+
 /**
  * Declaration of the notification queue object type
  * Contains a linked list of notification pending delivery to user space.
@@ -57,7 +61,7 @@ _mali_osk_notification_t *_mali_osk_notification_create(u32 type, u32 size)
 	_mali_osk_notification_wrapper_t *notification;
 
 	notification = (_mali_osk_notification_wrapper_t *)kmalloc(sizeof(_mali_osk_notification_wrapper_t) + size,
-			GFP_KERNEL | __GFP_HIGH | __GFP_REPEAT);
+			GFP_KERNEL | __GFP_HIGH | __GFP_RETRY_MAYFAIL);
 	if (NULL == notification) {
 		MALI_DEBUG_PRINT(1, ("Failed to create a notification object\n"));
 		return NULL;
diff --git a/src/devicedrv/ump/linux/ump_kernel_memory_backend_os.c b/src/devicedrv/ump/linux/ump_kernel_memory_backend_os.c
index f7791b0..21d9d00 100755
--- a/src/devicedrv/ump/linux/ump_kernel_memory_backend_os.c
+++ b/src/devicedrv/ump/linux/ump_kernel_memory_backend_os.c
@@ -26,7 +26,9 @@
 #include "ump_kernel_common.h"
 #include "ump_kernel_memory_backend.h"
 
-
+#ifdef __GFP_REPEAT
+#define __GFP_RETRY_MAYFAIL __GFP_REPEAT
+#endif
 
 typedef struct os_allocator {
 	struct semaphore mutex;
@@ -133,9 +135,9 @@ static int os_allocate(void *ctx, ump_dd_mem *descriptor)
 		struct page *new_page;
 
 		if (is_cached) {
-			new_page = alloc_page(GFP_HIGHUSER | __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN);
+			new_page = alloc_page(GFP_HIGHUSER | __GFP_ZERO | __GFP_RETRY_MAYFAIL | __GFP_NOWARN);
 		} else {
-			new_page = alloc_page(GFP_HIGHUSER | __GFP_ZERO | __GFP_REPEAT | __GFP_NOWARN | __GFP_COLD);
+			new_page = alloc_page(GFP_HIGHUSER | __GFP_ZERO | __GFP_RETRY_MAYFAIL | __GFP_NOWARN | __GFP_COLD);
 		}
 		if (NULL == new_page) {
 			break;
-- 
2.7.4

